// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
WITH new_inserted_feed_follows AS (
    INSERT INTO feed_follows (created_at, updated_at, user_id, feed_id)
    VALUES($1, $2, $3, $4)
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT new_inserted_feed_follows.id, new_inserted_feed_follows.created_at, new_inserted_feed_follows.updated_at, new_inserted_feed_follows.user_id, new_inserted_feed_follows.feed_id, u.name as user_name, f.name as feed_name
FROM new_inserted_feed_follows
INNER JOIN users as u
ON u.id = new_inserted_feed_follows.user_id
INNER JOIN feeds as f
ON f.id = new_inserted_feed_follows.feed_id
`

type CreateFeedFollowsParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
}

type CreateFeedFollowsRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (CreateFeedFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const getFeedfollowsForUser = `-- name: GetFeedfollowsForUser :many
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id, users.name AS user_name, feeds.name AS feed_name
FROM feed_follows
INNER JOIN users
ON users.id = feed_follows.user_id
INNER JOIN feeds
ON feeds.id = feed_follows.feed_id
WHERE users.name = $1
`

type GetFeedfollowsForUserRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedfollowsForUser(ctx context.Context, name string) ([]GetFeedfollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedfollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedfollowsForUserRow
	for rows.Next() {
		var i GetFeedfollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
